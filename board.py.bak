#!/usr/bin/python

# board.py
# note taking class for notes.py

import wx
import wx.richtext as rt


######################
# Board Class
######################

class Board(wx.ScrolledWindow):
    CARD_PADDING = 15
    MOVING_RECT_THICKNESS = 1

    def __init__(self, parent, id = wx.ID_ANY, pos = (0, 0), size = (20, 20)):
        super(Board, self).__init__(parent, size = size)

        self.cards = []
        self.selected_cards = []
        self.moving_card = None

        # Bindings
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Bind(wx.EVT_RIGHT_DOWN, self.OnRightDown)
        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
        self.Bind(wx.EVT_LEFT_DCLICK, self.OnLeftDClick)
        self.Bind(wx.EVT_MOUSE_CAPTURE_LOST, self.OnMouseCaptureLost)
        self.Bind(wx.EVT_MOTION, self.OnMotion)

        # Other gui setup
        self.SetScrollbars(20, 20, 6000, 6000) # method from wx.ScrolledWindow, NOT wx.Window
        self.SetScrollPos(wx.VERTICAL, -1000)
        self.SetFocus()

        
    ### Behavior functions
    
    def GetCards(self):
        """Returns a list of all cards held by the Board."""
        return self.cards

    def NewCard(self, pos, title = "title...", kind = "kind", content = "Write here..."):
        label = len(self.cards)
        newcard = Card(self, label, wx.ID_ANY, pos, title, kind, content)
        newcard.SetFocus()
        
        newcard.Bind(wx.EVT_LEFT_DOWN, self.OnCardLeftDown)
        newcard.Bind(wx.EVT_KILL_FOCUS, self.OnCardKillFocus)
        newcard.Bind(wx.EVT_SET_FOCUS, self.OnCardSetFocus)
        
        self.cards.append(newcard)
        self.GetParent().Log("New card created.")

        return newcard

    def SelectCard(self, card, new_sel = False):
        """
        Selects the card. If new_sel is True, erase all other
        selected cards and select only this one.
        """
        # print "select"
        if new_sel:
            self.UnselectAll()
            self.selected_cards = [card]
            self.PaintCardRect(card, card.GetPosition())
        elif card not in self.selected_cards:
            self.selected_cards.append(card)
            self.PaintCardRect(card, card.GetPosition())

    def UnselectCard(self, card):
        print "unselect"
        if card in self.selected_cards:
            self.selected_cards.remove(card)
            self.EraseCardRect(card, card.GetPosition())

    def UnselectAll(self):
        """
        Unselects all cards. Be sure to call this method instead of
         Unselecting() every card for proper rectangle erasing and attribute cleanup.
        """
        while len(self.selected_cards) > 0:
            c = self.selected_cards[0]
            self.UnselectCard(c)

    def HArrangeSelectedCards(self):
        """
        If there are any selected cards, arrange them in a horizontal grid,
        to the right of the left-most selected card.
        """
        if len(self.selected_cards) < 1: return

        # we unselect first so that we erase the selection rectangles correctly
        arrange = self.selected_cards[:]
        self.UnselectAll()         

        lefts = [c.GetRect().left for c in arrange]
        left = min(lefts)
        card = arrange[lefts.index(left)]
        top = card.GetRect().top
        arrange.sort(key=lambda x: x.GetRect().left)

        for c in arrange:
            c.SetPosition(wx.Point(left, top))
            left = c.GetRect().right + Board.CARD_PADDING

    def VArrangeSelectedCards(self):
        """
        If there are any selected cards, arrange them in a vertical grid,
        below of the top-most selected card.
        """
        if len(self.selected_cards) < 1: return

        # we unselect first so that we erase the selection rectangles correctly
        arrange = self.selected_cards[:]
        self.UnselectAll()         

        tops = [c.GetRect().top for c in arrange]
        top = min(tops)
        card = arrange[tops.index(top)]
        left = card.GetRect().left
        arrange.sort(key=lambda x: x.GetRect().top)

        for c in arrange:
            c.SetPosition(wx.Point(left, top))
            top = c.GetRect().bottom + Board.CARD_PADDING

                    
    ### Callbacks

    def OnCardSetFocus(self, ev):
        pass

    def OnCardKillFocus(self, ev):
        pass

    def OnChar(self, ev):
        print ev.GetKeyCode()

    def OnCardLeftDown(self, ev):
        """Called when a child card has been clicked."""
        card = ev.GetEventObject()

        # selection
        if not wx.GetMouseState().ControlDown():
            self.SelectCard(card, new_sel = True)
        else:
            if card in self.selected_cards:
                self.UnselectCard(card)
            elif card not in self.selected_cards:
                self.SelectCard(card, new_sel = False)        

        # initiate dragging
        self.CaptureMouse()
        card.SetFocusIgnoringChildren()
        self.on_motion = False
        self.cur_pos = card.GetPosition()
        self.init_mouse_pos = ev.GetPosition() # position relative to the card
        self.Bind(wx.EVT_LEFT_UP, self.OnCardLeftUp)
        self.moving_card = card        

    def OnLeftDown(self, ev):
        self.UnselectAll()
        self.SetFocusIgnoringChildren()
        
    def OnMotion(self, ev):
        # Draw a rectangle while dragging
        if ev.Dragging() and self.moving_card:
            # order is important
            self.on_motion = True
            self.EraseCardRect(self.moving_card, self.cur_pos)
            self.cur_pos = ev.GetPosition() - self.init_mouse_pos
            self.PaintCardRect(self.moving_card, self.cur_pos)

    def OnCardLeftUp(self, ev):
        # terminate dragging
        if self.on_motion:
            self.EraseCardRect(self.moving_card, self.cur_pos)
            self.on_motion = False
        if self.moving_card:
            end_pos = ev.GetPosition() # relative to the whole card canvas
            final_pos = end_pos - self.init_mouse_pos - (Card.BORDER_WIDTH, Card.BORDER_WIDTH)
            self.moving_card.Move(final_pos)
        self.moving_card = None
        self.ReleaseMouse()
        self.Unbind(wx.EVT_LEFT_UP)

    def OnMouseCaptureLost(self, ev):
        self.ReleaseMouse()

    def OnLeftDClick(self, ev):
        pos = self.CalculateNewCardPosition(ev.GetPosition())
        self.NewCard(pos)
        self.Refresh()

    def OnRightDown(self, ev):
        self.PopupMenu(BoardMenu(self.GetParent()), ev.GetPosition())

    def OnSize(self, ev):
        # print "board size"
        self.SetSize(ev.GetSize())

            
    ### Auxiliary functions

    def PaintCardRect(self, card, pos, thick = MOVING_RECT_THICKNESS, style = wx.SOLID):
        """Paints a rectangle just big enough to encircle card.GetRect(), at pos."""
        dc = wx.ClientDC(self)
        # Brush is for background, Pen is for foreground
        dc.SetBrush(wx.Brush(self.GetParent().GetBackgroundColour()))
        dc.SetPen(wx.Pen("BLACK", thick, style))
        x, y, w, h = card.GetRect()
        # dc.DrawRectangle(pos[0] - thick, pos[1] - thick, w + 2 * thick, h + 2 * thick)
        dc.DrawRectangle(pos[0] - thick,
                         pos[1] - thick,
                         w + 2 * thick,
                         h + 2 * thick)

    def EraseCardRect(self, card, pos, thick = MOVING_RECT_THICKNESS):
        print "erase"
        dc = wx.ClientDC(self)
        # Brush is for background, Pen is for foreground        
        dc.SetBrush(wx.Brush(self.GetParent().GetBackgroundColour()))
        dc.SetPen(wx.Pen("BLACK", thick, wx.TRANSPARENT))
        x, y, w, h = card.GetRect()
        dc.DrawRectangle(pos[0] - thick,
                         pos[1] - thick,
                          w + 2 * thick,
                          h + 2 * thick)

    def CalculateNewCardPosition(self, newpos):
        """Returns the position for a new card, having received a double-click at pos.
        Currently, just searches for intersecting cards. If any, we place the new card
        to the right of them."""
        pos = newpos
        rect = wx.Rect(newpos.x, newpos.y, Card.DEFAULT_SZ[0], Card.DEFAULT_SZ[1])
        rects = [c.GetRect() for c in self.cards]
        rights = [r.left + r.width for r in rects if rect.Intersects(r)]
        if len(rights) > 0:
            pos.x = max(rights) + self.CARD_PADDING
        return pos
    
    def Dump(self):
        """Returns a dict with all the info in the current cards."""
        carddict = {}

        # we put the scrollbars at the top, to get the real positions
        view_start = self.GetViewStart()
        self.Scroll(0, 0)
        
        for c in self.cards:
            pos = c.GetPosition()
            carddict[c.GetId()] = {
                "pos": (pos.x, pos.y),
                "kind": c.GetKind(),
                "title": c.GetTitle(),
                "content": c.GetContent()}
            
        # and return to the original view
        self.Scroll(view_start[0], view_start[1])

        return carddict

    

class BoardMenu(wx.Menu):
    def __init__(self, parent):
        super(BoardMenu, self).__init__()

        min_item = wx.MenuItem(self, wx.NewId(), "Minimize")
        self.AppendItem(min_item)
        close_item = wx.MenuItem(self, wx.NewId(), "Close")
        self.AppendItem(close_item)

        self.Bind(wx.EVT_MENU, self.OnMinimize, min_item)
        self.Bind(wx.EVT_MENU, self.OnClose, close_item)


    ### Callbacks
    
    def OnMinimize(self, ev):
        self.GetParent().Iconize()

    def OnClose(self, ev):
        self.GetParent().Close()            

        

######################
# Card Class
######################

class Card(wx.Panel):
    # Sizes
    DEFAULT_SZ = (250, 150)
    BIG_SZ     = (350, 250)
    BORDER_WIDTH = 2
    # Labels
    DEFAULT_LBL    = "kind"
    CONCEPT_LBL    = "C"
    ASSUMPTION_LBL = "A"
    RESEARCH_LBL   = "R"
    FACT_LBL       = "F"
    # Colors
    DEFAULT_CL    = (220, 218, 213, 255)
    CONCEPT_CL    = (0, 128, 0, 255)
    ASSUMPTION_CL = (250, 128, 114, 255)
    RESEARCH_CL   = (255, 165, 0, 255)
    FACT_CL       = (70, 130, 180, 255)

    def __init__(self, parent, label, id, pos, title = "title...", kind = "kind", content = "Write here..."):
        super(Card, self).__init__(parent, id, pos, self.DEFAULT_SZ,
                                   style = wx.BORDER_RAISED|wx.TAB_TRAVERSAL)
        self.size = self.DEFAULT_SZ
        self.label = label
        self.orig_pos = pos
        self.SetupUI()
        self.SetKind(kind)
        self.title.SetValue(title)
        self.content.SetValue(content)

        
    ### Behavior functions
    
    def GetKind(self):
        return self.kindbut.GetLabel()

    def GetTitle(self):
        return self.title.GetValue()

    def GetContent(self):
        return self.content.GetValue()

    def SetKind(self, kind):
        if kind == "kind":
            self.kindbut.SetLabel("kind")
        else:
            self.kindbut.SetLabel(kind[0])
            
        if kind == Card.CONCEPT_LBL      : self.SetBackgroundColour(Card.CONCEPT_CL)
        elif kind == Card.ASSUMPTION_LBL : self.SetBackgroundColour(Card.ASSUMPTION_CL)
        elif kind == Card.RESEARCH_LBL   : self.SetBackgroundColour(Card.RESEARCH_CL)
        elif kind == Card.FACT_LBL       : self.SetBackgroundColour(Card.FACT_CL)
        else                             : self.SetBackgroundColour(Card.DEFAULT_CL)

    
    ### Auxiliary functions
    
    def SetupUI(self):
        # Controls
        title = wx.TextCtrl(self, wx.ID_ANY, value = "title...", style = wx.TE_RICH)
        kindbut = wx.Button(self, wx.ID_ANY, label = "kind", size = (33, 23), style = wx.BORDER_NONE)
        kindbut.SetOwnFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_ITALIC, wx.FONTWEIGHT_NORMAL, False))
        content = rt.RichTextCtrl(self, value = "Write here...", size = (10, 10))
        del_but = wx.BitmapButton(self, wx.ID_ANY, bitmap = wx.ArtProvider.GetBitmap(wx.ART_DELETE))
        cpy_but = wx.BitmapButton(self, wx.ID_ANY, bitmap = wx.ArtProvider.GetBitmap(wx.ART_COPY))
        # label   = wx.StaticText(self, wx.ID_ANY, label = str(self.label), style = wx.ALIGN_RIGHT)
        
        # Boxes
        hbox1 = wx.BoxSizer(wx.HORIZONTAL)
        hbox1.Add(title, flag = wx.LEFT|wx.CENTER, proportion = 1, border = Card.BORDER_WIDTH)
        hbox1.Add(kindbut, proportion = 0, flag = wx.RIGHT, border = Card.BORDER_WIDTH)

        hbox2 = wx.BoxSizer(wx.HORIZONTAL)
        hbox2.Add(content, proportion = 1, flag = wx.ALL|wx.EXPAND, border = Card.BORDER_WIDTH)        

        hbox3 = wx.BoxSizer(wx.HORIZONTAL)        
        hbox3.Add(del_but, proportion=0, flag=wx.RIGHT, border=Card.BORDER_WIDTH)
        hbox3.Add(cpy_but, proportion=0, flag=wx.RIGHT, border=Card.BORDER_WIDTH)

        vbox = wx.BoxSizer(wx.VERTICAL)                
        vbox.Add(hbox1, proportion = 0, flag = wx.LEFT |wx.EXPAND, border=Card.BORDER_WIDTH)
        vbox.Add(hbox2, proportion = 1, flag = wx.LEFT |wx.EXPAND, border=Card.BORDER_WIDTH)
        vbox.Add(hbox3, proportion = 0, flag = wx.RIGHT|wx.EXPAND, border=Card.BORDER_WIDTH)
        
        # Bindings
        title.Bind(wx.EVT_SET_FOCUS, self.OnTextFocus)
        kindbut.Bind(wx.EVT_BUTTON, self.OnKindPressed)
        content.Bind(wx.EVT_SET_FOCUS, self.OnTextFocus)
        del_but.Bind(wx.EVT_BUTTON, self.OnDeletePressed)
        cpy_but.Bind(wx.EVT_BUTTON, self.OnCopyPressed)

        self.kindbut = kindbut
        self.title = title
        self.content = content
        self.SetSizer(vbox)
        self.Show(True)


    ### Callbacks
    
    def OnTextFocus(self, ev):
        ctrl = ev.GetEventObject()
        if ctrl.GetValue() == "title..." or ctrl.GetValue() == "Write here...":
            ctrl.ChangeValue("")
        # if not skipped, there will be no blinking cursor!
        ev.Skip()

    def OnDeletePressed(self, ev):
        self.Show(False)        
        parent = self.GetParent()
        parent.UnselectCard(self)
        parent.GetCards().remove(self)
        parent.GetParent().Log("Card deleted.")

    def OnCopyPressed(self, ev):
        parent = self.GetParent()
        pos = parent.CalculateNewCardPosition(self.GetPosition())
        parent.NewCard(pos, self.GetTitle(), self.GetKind(), self.GetContent())

    def OnKindPressed(self, ev):
        ctrl = ev.GetEventObject()
        print ctrl
        rect = ctrl.GetRect()
        pos = ctrl.GetPosition() + (rect.width, rect.height)
        self.PopupMenu(KindSelectMenu(self), pos)


            
class KindSelectMenu(wx.Menu):
    def __init__(self, card):
        super(KindSelectMenu, self).__init__()
        self.card = card

        A_item = wx.MenuItem(self, wx.NewId(), "Assumption")
        C_item = wx.MenuItem(self, wx.NewId(), "Concept")
        R_item = wx.MenuItem(self, wx.NewId(), "Research")
        F_item = wx.MenuItem(self, wx.NewId(), "Fact")
        N_item = wx.MenuItem(self, wx.NewId(), "None")

        self.AppendItem(A_item)
        self.AppendItem(C_item)
        self.AppendItem(R_item)        
        self.AppendItem(F_item)
        self.AppendItem(N_item)

        self.Bind(wx.EVT_MENU, lambda ev: self.OnSelect(ev, Card.ASSUMPTION_LBL), A_item)
        self.Bind(wx.EVT_MENU, lambda ev: self.OnSelect(ev, Card.CONCEPT_LBL), C_item)
        self.Bind(wx.EVT_MENU, lambda ev: self.OnSelect(ev, Card.RESEARCH_LBL), R_item)
        self.Bind(wx.EVT_MENU, lambda ev: self.OnSelect(ev, Card.FACT_LBL), F_item)
        self.Bind(wx.EVT_MENU, lambda ev: self.OnSelect(ev, Card.DEFAULT_LBL), N_item)

        
    # Callbacks
    def OnSelect(self, ev, kind):
        # my parent is the control that displayed the menu
        if isinstance(self.card, Card):
            self.card.SetKind(kind)


